buildscript {
    repositories {
        maven { url "http://www.openforis.org/nexus/content/groups/public/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'maven-publish'

repositories {
    maven { url "http://www.openforis.org/nexus/content/groups/public/" }
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.1'
    compile('com.viewpagerindicator:library:2.4.1.1') {
        exclude group: 'com.google.android'
    }
    compile 'com.ipaulpro.afilechooser:afilechooser:0.0.1@aar'
    compile 'net.rdrei.android.dirchooser:library:2.1.1@aar'
    compile 'com.inqbarna:tablefixheaders:1.0.0@aar'

    compile 'com.android.support:support-v4:19.+'
    compile 'com.android.support:appcompat-v7:19.+'

    compile(project(":model")) {
//        exclude group: 'org.jooq'
        exclude group: 'org.springframework'
        exclude group: 'commons-collections'
        exclude group: 'commons-beanutils'
        exclude group: 'commons-logging'
        exclude group: 'commons-jxpath'
        exclude group: 'xmlpull'
        exclude group: 'cglib'
        exclude group: 'org.slf4j'
        exclude group: 'log4j'
        exclude group: 'org.apache.lucene'
        exclude group: 'org.liquibase'
    }


    compile('org.openforis.android:android-jxpath:1.0-Alpha2') {
        exclude group: 'org.eclipse.jetty.orbit'
        exclude group: 'org.apache.tomcat'
    }
    compile 'org.openforis.android:android-spring:1.0-Alpha2'
    compile 'org.sqldroid:sqldroid:1.0.0.RC10.1'
    compile 'org.slf4j:slf4j-android:1.6.1-RC1'
    compile 'org.openforis.android:android-liquibase-core:2.0.6-Alpha2'
    compile 'org.slf4j:slf4j-android:1.6.1-RC1'
    compile 'com.googlecode.openbeans:openbeans:1.0'

}


def localProps = new Properties()
localProps.load(rootProject.file('local.properties').newDataInputStream())

int actualVersionCode = currentVersionCode as int
String actualVersionName = currentVersionName

boolean isRelease = System.properties['release'] == 'true'

if (isRelease) {
    actualVersionCode = actualVersionCode + 1
    actualVersionName = System.properties['versionName'] ?: actualVersionName

    def props = new Properties()
    def propsFile = rootProject.file('gradle.properties')
    props.load(propsFile.newDataInputStream())

    props.setProperty('currentVersionCode', actualVersionCode as String)
    props.setProperty('currentVersionName', actualVersionName)
    props.store(propsFile.newWriter(), null)

    println "**************************************************************************"
    println "*** Releasing: $actualVersionName with build number $actualVersionCode ***"
    println "**************************************************************************"
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        versionCode actualVersionCode
        versionName actualVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }


    if (isRelease)
        signingConfigs {
            release {
                def defaultStorePath = System.properties['user.home'] + File.separator + '.android-release-key.keystore'
                def storePath = System.console().readLine("\n-----------------\n\$ Enter keystore path " +
                        "[$defaultStorePath]: ")
                if (!storePath)
                    storePath = defaultStorePath
                storeFile file(storePath)
                storePassword System.console().readPassword("\$ Enter keystore password: ") as String
                def defaultKeyAlias = 'android-release-key'
                def selectedKeyAlias = System.console().readLine("\$ Enter key alias [$defaultKeyAlias]:") as String
                if (!selectedKeyAlias)
                    selectedKeyAlias = defaultKeyAlias
                keyAlias selectedKeyAlias
                keyPassword System.console().readPassword("\$ Enter key password: ") as String
            }
        }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (isRelease) {
                signingConfig signingConfigs.release
                applicationVariants.all { variant ->
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            output.outputFile = new File(outputFile.parent, 'Collect.apk')
                        }
                    }
                }
            }
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.openforis.collect.android'
            artifactId 'collect-mobile'
            version actualVersionCode as String
            artifact file('build/outputs/apk/Collect.apk')
        }
    }
    repositories {
        maven {
            url "http://www.openforis.org/nexus/content/repositories/releases/"
            credentials {
                username localProps.getProperty('nexus.username')
                password localProps.getProperty('nexus.password')
            }
        }
    }
}
