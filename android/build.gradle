buildscript {
    repositories {
        maven {
            url "http://www.openforis.org/nexus/content/groups/public/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.2'
    }
}

apply plugin: 'android'

repositories {
    maven { url "http://www.openforis.org/nexus/content/groups/public/" }
}

dependencies {
    compile 'org.apache.commons:commons-lang3:3.3.1'
    compile('com.viewpagerindicator:library:2.4.1.1') {
        exclude group: 'com.google.android'
    }
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'de.timroes.android:EnhancedListView:0.3.2@aar'

    compile 'com.android.support:support-v4:19.+'
    compile 'com.android.support:appcompat-v7:19.+'

    compile(project(":model")) {
        exclude group: 'org.jooq'
        exclude group: 'org.springframework'
        exclude group: 'commons-collections'
        exclude group: 'commons-beanutils'
        exclude group: 'commons-logging'
        exclude group: 'commons-jxpath'
        exclude group: 'xmlpull'
        exclude group: 'cglib'
        exclude group: 'log4j'
        exclude group: 'org.apache.lucene'
        exclude group: 'org.liquibase'
    }

    compile('org.openforis.android:android-jxpath:1.0-Alpha2') {
        exclude group: 'commons-beanutils'
        exclude group: 'org.eclipse.jetty.orbit'
        exclude group: 'org.apache.tomcat'
    }
    compile 'org.openforis.android:android-spring:1.0-Alpha2'
    compile 'org.openforis.android:android-jooq:1.0-Alpha2'
    compile 'org.sqldroid:sqldroid:1.0.0.RC10.1'
    compile 'org.slf4j:slf4j-android:1.6.1-RC1'
    compile 'org.openforis.android:android-liquibase-core:2.0.6-Alpha2'
    compile 'org.slf4j:slf4j-android:1.6.1-RC1'
    compile 'com.googlecode.openbeans:openbeans:1.0'

}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }

    boolean isRelease = System.properties['release'] == 'true'
    logger.info('****************** Release: ' + isRelease)

    if (isRelease)
        signingConfigs {
            release {
                def defaultStorePath = System.properties['user.home'] + File.separator + '.android-release-key.keystore'
                def storePath = System.console().readLine("\n-----------------\n\$ Enter keystore path [$defaultStorePath]: ")
                if (!storePath)
                    storePath = defaultStorePath
                storeFile file(storePath)
                storePassword System.console().readPassword("\$ Enter keystore password: ") as String
                def defaultKeyAlias = 'android-release-key'
                def selectedKeyAlias = System.console().readLine("\$ Enter key alias [$defaultKeyAlias]:") as String
                if (!selectedKeyAlias)
                    selectedKeyAlias = defaultKeyAlias
                keyAlias selectedKeyAlias
                keyPassword System.console().readPassword("\$ Enter key password: ") as String
            }
        }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            if (isRelease) {
                signingConfig signingConfigs.release
                applicationVariants.all { variant ->
                    def file = variant.outputFile
                    variant.outputFile = new File(file.parent, 'Collect.apk')
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    lintOptions {
        disable 'InvalidPackage'
    }
}

